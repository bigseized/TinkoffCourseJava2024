services:
  scrapper:
    build: ./scrapper/
    hostname: scrapper
    container_name: scrapper
    depends_on:
      - postgresql
      - liquibase-migrations
      - zookeeper
      - init-kafka
    ports:
      - "8080:8080"
    networks:
      - backend
      - applications
      - kafka-network

  bot:
    build: ./bot/
    hostname: bot
    container_name: bot
    depends_on:
      - scrapper
    ports:
      - "8090:8090"
    networks:
      - applications
      - kafka-network

  postgresql:
    image: postgres:16
    container_name: postgresql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: scrapper
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgresql:/var/lib/postgresql/data
    networks:
      - backend

  liquibase-migrations:
    image: liquibase/liquibase:4.25
    container_name: liquibase-migrations
    depends_on:
      - postgresql
    command:
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/scrapper
      - --username=postgres
      - --password=postgres
      - update
    volumes:
      - ./scrapper/src/main/resources/migrations:/liquibase/changelog
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - kafka-network

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "29091:29091"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9091,PLAINTEXT_HOST://localhost:29091
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9091,PLAINTEXT_HOST://0.0.0.0:29091
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      BOOTSTRAP_SERVERS: kafka1:9091,kafka2:9092
      ZOOKEEPER: zookeeper:2181
    depends_on:
      - zookeeper
    volumes:
      - kafka1-data:/var/lib/kafka/data
    networks:
      - kafka-network

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka2
    container_name: kafka2
    ports:
      - "29092:29092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_BROKER_ID: 2
      BOOTSTRAP_SERVERS: kafka1:9091,kafka2:9092
      ZOOKEEPER: zookeeper:2181
    depends_on:
      - zookeeper
    volumes:
      - kafka2-data:/var/lib/kafka/data
    networks:
      - kafka-network

  init-kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - kafka1
      - kafka2
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "
      kafka-topics --bootstrap-server kafka1:9091,kafka2:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka1:9091,kafka2:9092 --create --if-not-exists --topic updates --replication-factor 2 --partitions 1
      kafka-topics --bootstrap-server kafka1:9091,kafka2:9092 --create --if-not-exists --topic updates.dlq --partitions 1


      kafka-topics --bootstrap-server kafka1:9091,kafka2:9092 --list
      "

  grafana:
    image: grafana/grafana-oss
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring

volumes:
  postgresql: { }
  kafka1-data: { }
  kafka2-data: { }
  zookeeper-data: { }


networks:
  applications: { }
  kafka-network: { }
  backend: { }
  monitoring:
    driver: bridge
