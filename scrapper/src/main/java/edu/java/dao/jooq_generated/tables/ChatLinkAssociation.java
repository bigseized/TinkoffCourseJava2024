/*
 * This file is generated by jOOQ.
 */

package edu.java.dao.jooq_generated.tables;

import edu.java.dao.jooq_generated.Keys;
import edu.java.dao.jooq_generated.Public;
import edu.java.dao.jooq_generated.tables.records.ChatLinkAssociationRecord;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ChatLinkAssociation extends TableImpl<ChatLinkAssociationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chat_link_association</code>
     */
    public static final ChatLinkAssociation CHAT_LINK_ASSOCIATION = new ChatLinkAssociation();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<ChatLinkAssociationRecord> getRecordType() {
        return ChatLinkAssociationRecord.class;
    }

    /**
     * The column <code>public.chat_link_association.link_id</code>.
     */
    public final TableField<ChatLinkAssociationRecord, Long> LINK_ID =
        createField(DSL.name("link_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.chat_link_association.chat_id</code>.
     */
    public final TableField<ChatLinkAssociationRecord, Long> CHAT_ID =
        createField(DSL.name("chat_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private ChatLinkAssociation(Name alias, Table<ChatLinkAssociationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ChatLinkAssociation(
        Name alias,
        Table<ChatLinkAssociationRecord> aliased,
        Field<?>[] parameters,
        Condition where
    ) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.chat_link_association</code> table
     * reference
     */
    public ChatLinkAssociation(String alias) {
        this(DSL.name(alias), CHAT_LINK_ASSOCIATION);
    }

    /**
     * Create an aliased <code>public.chat_link_association</code> table
     * reference
     */
    public ChatLinkAssociation(Name alias) {
        this(alias, CHAT_LINK_ASSOCIATION);
    }

    /**
     * Create a <code>public.chat_link_association</code> table reference
     */
    public ChatLinkAssociation() {
        this(DSL.name("chat_link_association"), null);
    }

    public <O extends Record> ChatLinkAssociation(
        Table<O> path,
        ForeignKey<O, ChatLinkAssociationRecord> childPath,
        InverseForeignKey<O, ChatLinkAssociationRecord> parentPath
    ) {
        super(path, childPath, parentPath, CHAT_LINK_ASSOCIATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ChatLinkAssociationPath extends ChatLinkAssociation implements Path<ChatLinkAssociationRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> ChatLinkAssociationPath(
            Table<O> path,
            ForeignKey<O, ChatLinkAssociationRecord> childPath,
            InverseForeignKey<O, ChatLinkAssociationRecord> parentPath
        ) {
            super(path, childPath, parentPath);
        }

        private ChatLinkAssociationPath(Name alias, Table<ChatLinkAssociationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ChatLinkAssociationPath as(String alias) {
            return new ChatLinkAssociationPath(DSL.name(alias), this);
        }

        @Override
        public ChatLinkAssociationPath as(Name alias) {
            return new ChatLinkAssociationPath(alias, this);
        }

        @Override
        public ChatLinkAssociationPath as(Table<?> alias) {
            return new ChatLinkAssociationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public UniqueKey<ChatLinkAssociationRecord> getPrimaryKey() {
        return Keys.CHAT_LINK_ASSOCIATION_PKEY;
    }

    @Override
    @NotNull
    public List<ForeignKey<ChatLinkAssociationRecord, ?>> getReferences() {
        return Arrays.asList(
            Keys.CHAT_LINK_ASSOCIATION__CHAT_LINK_ASSOCIATION_LINK_ID_FKEY,
            Keys.CHAT_LINK_ASSOCIATION__CHAT_LINK_ASSOCIATION_CHAT_ID_FKEY
        );
    }

    private transient Link.LinkPath _link;

    /**
     * Get the implicit join path to the <code>public.link</code> table.
     */
    public Link.LinkPath link() {
        if (_link == null) {
            _link = new Link.LinkPath(this, Keys.CHAT_LINK_ASSOCIATION__CHAT_LINK_ASSOCIATION_LINK_ID_FKEY, null);
        }

        return _link;
    }

    private transient Chat.ChatPath _chat;

    /**
     * Get the implicit join path to the <code>public.chat</code> table.
     */
    public Chat.ChatPath chat() {
        if (_chat == null) {
            _chat = new Chat.ChatPath(this, Keys.CHAT_LINK_ASSOCIATION__CHAT_LINK_ASSOCIATION_CHAT_ID_FKEY, null);
        }

        return _chat;
    }

    @Override
    @NotNull
    public ChatLinkAssociation as(String alias) {
        return new ChatLinkAssociation(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public ChatLinkAssociation as(Name alias) {
        return new ChatLinkAssociation(alias, this);
    }

    @Override
    @NotNull
    public ChatLinkAssociation as(Table<?> alias) {
        return new ChatLinkAssociation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public ChatLinkAssociation rename(String name) {
        return new ChatLinkAssociation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public ChatLinkAssociation rename(Name name) {
        return new ChatLinkAssociation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public ChatLinkAssociation rename(Table<?> name) {
        return new ChatLinkAssociation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public ChatLinkAssociation where(Condition condition) {
        return new ChatLinkAssociation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public ChatLinkAssociation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public ChatLinkAssociation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public ChatLinkAssociation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public ChatLinkAssociation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public ChatLinkAssociation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public ChatLinkAssociation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public ChatLinkAssociation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public ChatLinkAssociation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public ChatLinkAssociation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
